USE SQL_PRACTICE
SELECT *FROM EMPLOYEE
 /* JOINS */
CREATE TABLE NETFLIX (ID INT,MOVIE_NAME CHAR(10),BUDGET MONEY)
CREATE TABLE PRIME (ID INT,SERIES_NAME CHAR(10),RELEASE_YEAR CHAR(10))


INSERT INTO NETFLIX VALUES (1,'STONECOLD',100000)
INSERT INTO NETFLIX VALUES (2,'MONEYHEIST',200000)
INSERT INTO NETFLIX VALUES (3,'VIKINGS',120000)
INSERT INTO NETFLIX VALUES (4,'GOT',150000)
INSERT INTO NETFLIX VALUES (5,'PB',300000)


INSERT INTO PRIME VALUES (10,'WAR',2018)
INSERT INTO PRIME VALUES (2,'WATERFIRE',2019)
INSERT INTO PRIME VALUES (11,'FIGHTER',2020)
INSERT INTO PRIME VALUES (3,'PATHAN',2021)
INSERT INTO PRIME VALUES (12,'BIGIL',2022)


SELECT *FROM NETFLIX
SELECT *FROM PRIME

/* ANSI_JOINS */
/* INNER JOIN */

SELECT *FROM NETFLIX INNER JOIN  PRIME ON NETFLIX.ID=PRIME.ID
/* LEFT OUTER */

SELECT *FROM NETFLIX LEFT OUTER JOIN  PRIME ON NETFLIX.ID=PRIME.ID
/* RIGHT OUTER */

SELECT *FROM NETFLIX RIGHT OUTER JOIN  PRIME ON NETFLIX.ID=PRIME.ID
/* CROSS JOIN */

SELECT *FROM NETFLIX CROSS JOIN  PRIME 
/* EQUI JOIN */
SELECT *FROM NETFLIX,PRIME WHERE NETFLIX.ID=PRIME.ID
/* NON-EQUI JOIN */ 
 JOIN */
SELECT *FROM NETFLIX,PRIME WHERE NETFLIX.ID<PRIME.ID
SELECT *FROM NETFLIX,PRIME WHERE NETFLIX.ID>PRIME.ID

/* IDENTITY  (SEED,INCRIMENT) */

CREATE TABLE STUDENTS (STU_ID INT IDENTITY,STU_NAME VARCHAR(10),STU_FEE MONEY);
INSERT INTO STUDENTS VALUES ('BASHA',5000)
INSERT INTO STUDENTS VALUES ('SHAIK',2500)
INSERT INTO STUDENTS VALUES ('MEHABUB',3000)
INSERT INTO STUDENTS VALUES ('ALI',4500)
SET IDENTITY_INSERT STUDENTS ON
INSERT INTO STUDENTS (STU_ID,STU_NAME,STU_FEE)VALUES (10,'ABDUL',5000)
SET IDENTITY_INSERT STUDENTS OFF
INSERT INTO STUDENTS VALUES ('VALI',6600)


SELECT *FROM STUDENTS




CREATE TABLE SCHOOL_DATA (STU_ID INT IDENTITY(50,1),STU_NAME VARCHAR(10),STU_LOCATION VARCHAR(10))

INSERT INTO SCHOOL_DATA VALUES ('BASHA',5000)
INSERT INTO SCHOOL_DATA VALUES ('SHAIK',2500)
INSERT INTO SCHOOL_DATA VALUES ('MEHABUB',3000)
INSERT INTO SCHOOL_DATA VALUES ('ALI',4500)

SELECT *FROM SCHOOL_DATA

/* SET OPERATIONS */
CREATE TABLE SET_1 (COL_1 INT,COL_2 VARCHAR(20),COL_3 VARCHAR(10))
CREATE TABLE SET_2 (COL_1 INT,COL_2 VARCHAR(20),COL_3 VARCHAR(10))

INSERT INTO SET_1 VALUES (1,'BASHA','ANDRA')
INSERT INTO SET_1 VALUES (2,'KASIM','TG')
INSERT INTO SET_1 VALUES (3,'VALI','PUNE')
INSERT INTO SET_1 VALUES (1,'BASHA','ANDRA')


INSERT INTO SET_2 VALUES (1,'BASHA','ANDRA')
INSERT INTO SET_2 VALUES (2,'RAVI','TG')
INSERT INTO SET_2 VALUES (3,'KALYAN','PUNE')
INSERT INTO SET_2 VALUES (1,'BASHA','ANDRA')

SELECT *FROM SET_1
UNION     /* DUPLICATES DON'T ALLOW */
SELECT *FROM SET_2

SELECT *FROM SET_1
UNION ALL    /* DUPLICATES  ALLOWS */
SELECT *FROM SET_2

SELECT *FROM SET_1
INTERSECT  /* GIVES ONLY COMMON DATA */
SELECT *FROM SET_2

SELECT *FROM SET_2
EXCEPT   /* REMOVES COMMON DATA */
SELECT *FROM SET_1

SELECT *FROM SET_1
EXCEPT   /* REMOVES COMMON DATA */
SELECT *FROM SET_2

/* PRIMARY KEY & FOREIGN KEY */
CREATE TABLE HOTSTAR (ID INT PRIMARY KEY,MOVIE_NAME VARCHAR(20),BUDJET MONEY)
INSERT_INTO_PARENT:

INSERT INTO HOTSTAR VALUES (1,'SHIDDAT',100000)
INSERT INTO HOTSTAR VALUES (2,'PATHAAN',500000)
INSERT INTO HOTSTAR VALUES (3,'JAWAAN',600000)
INSERT INTO HOTSTAR VALUES  (4,'DUNKI',400000)
INSERT INTO HOTSTAR VALUES (5,'KING',500000)
CREATE TABLE SONY (S_NO INT, SERIES_NAME VARCHAR(10),RELEASE_YEAR INT,ID INT FOREIGN KEY REFERENCES HOTSTAR (ID))
INSERT_INTO_CHILD:

INSERT INTO SONY VALUES  (5,'ZERO',2018,1)
INSERT INTO SONY VALUES  (6,'KALKI',2024,2)
INSERT INTO SONY VALUES  (7,'SALAAR',2023,3)
INSERT INTO SONY VALUES  (8,'KHAIDI',2020,4)

SELECT *FROM HOTSTAR
SELECT *FROM SONY
/* RANKING */
/* ROW  NUMBER RANKIN */
SELECT *FROM HOTSTAR

SELECT ID,MOVIE_NAME,BUDJET,ROW_NUMBER ()OVER (ORDER BY BUDJET DESC)RAN_COL FROM HOTSTAR
/* RANK */
SELECT ID,MOVIE_NAME,BUDJET,RANK ()OVER (ORDER BY BUDJET DESC)RANK_NO FROM HOTSTAR
/* DENSE RANK */ /* PERFECT TO USE IN REAL LIFE */
SELECT ID,MOVIE_NAME,BUDJET,DENSE_RANK()OVER (ORDER BY BUDJET DESC)RAN_COL FROM HOTSTAR

/* TCL_COMMANDS */

/*COMMIT */
SELECT *FROM EMPLOYEE

DELETE FROM EMPLOYEE WHERE NAME='SHAIK';
COMMIT;

/* ROLL BACK */
BEGIN TRANSACTION:
DELETE FROM EMPLOYEE WHERE NAME='SHAIK';
ROLLBACK;
BEGIN TRANSACTION
